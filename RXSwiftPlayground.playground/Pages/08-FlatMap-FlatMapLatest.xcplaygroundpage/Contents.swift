//: [Previous](@previous)

import Foundation
import RxSwift
import RxCocoa
import PlaygroundSupport

let dateFormatter = DateFormatter()
dateFormatter.dateFormat = "HH:mm:ss.SSS"

let pSubject = PublishSubject<String>()


/*:
 ## `flatMap`
 ‡πÄ‡∏õ‡πá‡∏ô operator ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Stream ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô Observable ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà
 ‡πÇ‡∏î‡∏¢‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ Element ‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤ ‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ ‡∏™‡∏£‡πâ‡∏≤‡∏á Observable ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ **Merge** ‡∏Å‡∏±‡∏ö Observable ‡πÄ‡∏Å‡πà‡∏≤
 
 ## `flatMapLatest`
 ‡πÄ‡∏õ‡πá‡∏ô operator ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Stream ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô Observable ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà
 ‡πÇ‡∏î‡∏¢‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ Element ‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤ ‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ ‡∏™‡∏£‡πâ‡∏≤‡∏á Observable ‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤ **‚ÄãReplace** Observable ‡πÄ‡∏Å‡πà‡∏≤
 
 ----
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å Int ‡πÄ‡∏õ‡πá‡∏ô Observable String
 ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á Element ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
 
 * ‡∏•‡∏≠‡∏á ‡πÅ‡∏Å‡πâ comment ‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î 35 ‡πÅ‡∏•‡∏∞ 36 ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏™‡∏¥
 */

let conQueue = ConcurrentDispatchQueueScheduler(qos: DispatchQoS.background)

let fObservable = pSubject
    .asObservable()
    .observeOn(conQueue)
    //    .flatMapLatest { (value) -> Observable<String> in
    .flatMap { (value) -> Observable<String> in
        return Observable
            .create({ (observer) -> Disposable in
                // ‡∏à‡∏≥‡∏•‡∏≠‡∏á sync async call
                increseExecCount()
                DispatchQueue.global().async {
                    observer.onNext("\(value)] [1st time")
                }
                
                increseExecCount()
                DispatchQueue.global().asyncAfter(deadline: .now() + .seconds(1), execute: {
                    observer.onNext("\(value)] [2nd time")
                })
                
                increseExecCount()
                DispatchQueue.global().asyncAfter(deadline: .now() + .seconds(2), execute: {
                    observer.onNext("\(value)] [3rd time")
                })
                
                return Disposables.create()
            })
            .observeOn(conQueue)
}



let subscribe = fObservable
    .subscribe(onNext: { (result) in
        //        print("\(dateFormatter.string(from: Date())) [\(result)] on \(Thread.current)")
        print("\(dateFormatter.string(from: Date())) [\(result)]")
        
        popExecCount()
    })


pSubject.onNext("‚ù§Ô∏è")

DispatchQueue.global().asyncAfter(deadline: .now() + .seconds(1), execute: {
    pSubject.onNext("üíõ")
})

DispatchQueue.global().asyncAfter(deadline: .now() + .seconds(2), execute: {
    pSubject.onNext("üíö")
})


/*:
 >    ‡∏à‡∏∞‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤ fObservable ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤ pSubject 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
 ‡∏°‡∏±‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ Call Service ‡∏´‡∏£‡∏∑‡∏≠ Event ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Async
 
 ![‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ô‡∏µ‡πâ](FlatMap.png)
 ![‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ô‡∏µ‡πâ](FlatMapLatest.png)
 */

PlaygroundSupport.PlaygroundPage.current.needsIndefiniteExecution = true

//: [Next](@next)
